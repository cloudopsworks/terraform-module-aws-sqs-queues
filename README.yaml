name: Terraform AWS SQS Queue Management Module
#logo: logo/logo.jpg

license: "APACHE2"

copyrights:
  - name: "Cloud Ops Works LLC"
    url: "https://cloudops.works"
    year: "2024"

github_repo: cloudopsworks/terraform-module-aws-sqs-queues

description: |-
  AWS SQS Queue Management Module for Terraform that allows creation and management of SQS queues with comprehensive configuration options. 
  Supports FIFO queues, encryption, message attributes, dead-letter queues, and IAM policies.
  Enables easy setup of multiple queues with different configurations using a single module.

# Introduction to the project
introduction: |-
  This Terraform module simplifies the creation and management of AWS SQS queues. It provides:
  - Support for both standard and FIFO queues
  - Configurable encryption using AWS SSE or KMS
  - Dead-letter queue configuration
  - IAM policy management
  - Redrive policies for message handling
  - Flexible queue naming with prefix support
  - Comprehensive queue attribute configuration

# How to use this project
usage: |-
  The module accepts a map of queue configurations through the `configs` variable. Configuration structure supports:

  Global encryption settings:
  ```yaml
  configs:
    encryption:
      enabled: true                    # Enable KMS encryption
      description: "KMS key desc"      # KMS key description
      deletion_window_in_days: 7       # KMS key deletion window (default: 7)
      enable_key_rotation: true        # Enable KMS key rotation (default: true)
      is_enabled: true                 # Is KMS key enabled (default: true)
      alias: "alias/my-key"           # KMS key alias (default: alias/(system_name)-sqs-queue)
  ```

  Queue configurations:
  ```yaml
  configs:
    queues:
      my_queue:
        name: "queue-name"             # Queue name (optional)
        name_prefix: "prefix"          # Queue name prefix if name not provided
        fifo:
          enabled: true                # Enable FIFO queue (default: false)
          throughput_limit: "perQueue" # FIFO throughput limit (perQueue or per_message_group_id)
        max_message_size: 262144       # Maximum message size (default: 262144 bytes)
        deduplication: true            # Content-based deduplication (default: false)
        visibility_timeout: 30         # Visibility timeout in seconds
        message_retention: 345600      # Message retention period in seconds
        delay_seconds: 0               # Message delay in seconds
        receive_wait_time: 0           # Long polling wait time
        encryption:
          override: false              # Override global encryption settings
          sse_enabled: true           # Enable server-side encryption
          kms_key_id: "key-id"        # KMS key ID for encryption
          reuse_period_seconds: 300    # KMS data key reuse period
        policies:
          sqs:                       # SQS queue policy (optional)
            sid: "AllowS3"          # Statement ID
            actions: ["sqs:*"]      # IAM actions
            effect: "Allow"         # Allow/Deny
            principals: []          # IAM principals list
            conditions: []          # Policy conditions list
          redrive_allow: {}         # Dead letter queue allow policy (optional)
          redrive:                  # Dead letter queue policy (optional)
            deadLetterTargetArn: "arn:aws:sqs:region:account:queue"
            maxReceiveCount: 3
  ```

  Example configuration:
  ```hcl
  configs = {
    queue1 = {
      name_prefix = "myapp"
      fifo = {
        enabled = true
        throughput_limit = "perQueue"
      }
      encryption = {
        sse_enabled = true
      }
      message_retention = 345600
      visibility_timeout = 30
      policies = {
        redrive = {
          deadLetterTargetArn = "arn:aws:sqs:region:account:dlq"
          maxReceiveCount = 3
        }
      }
    }
  }
  ```

# Example usage
examples: |-
  Basic terragrunt configuration:
  ```hcl
  include "root" {
    path = find_in_parent_folders()
  }

  terraform {
    source = "git::https://github.com/cloudopsworks/terraform-module-aws-sqs-queues.git?ref=v1.0.0"
  }

  inputs = {
    configs = {
      dlq = {
        name_prefix = "deadletter"
        message_retention = 1209600
      }
      main = {
        name_prefix = "mainqueue"
        policies = {
          redrive = {
            deadLetterTargetArn = dependency.dlq.outputs.sqs_queues["dlq"].arn
            maxReceiveCount = 3
          }
        }
      }
    }
  }
  ```

# How to get started quickly
quickstart: |-
  1. Add the module to your terragrunt.hcl:
     ```hcl
     terraform {
       source = "git::https://github.com/cloudopsworks/terraform-module-aws-sqs-queues.git?ref=v1.0.0"
     }
     ```
  
  2. Configure basic queue settings:
     ```hcl
     inputs = {
       configs = {
         myqueue = {
           name_prefix = "myapp"
           message_retention = 345600
           visibility_timeout = 30
         }
       }
     }
     ```
  
  3. Apply the configuration:
     ```bash
     terragrunt init
     terragrunt plan
     terragrunt apply
     ```
  
  4. Access queue details through outputs:
     - ARN: outputs.sqs_queues["myqueue"].arn
     - URL: outputs.sqs_queues["myqueue"].url

include:
  - "docs/targets.md"
  - "docs/terraform.md"

contributors:
  - name: "Cristian Beraha"
    github: "berahac"